on:
  workflow_call:
    inputs:
      runs-on:
        description: Platform to execute on
        type: string
        default: ubuntu-latest
        required: false
      namespace:
        description: Kubernetes namespace
        type: string
        required: true
      aws-region:
        description: AWS region
        type: string
        required: true
        default: eu-west-1
      cluster-name:
        description: EKS Cluster name
        type: string
        required: true
      environment:
        required: true
        type: string
      includes:
        required: true
        type: string
      name:
        required: true
        type: string

jobs:
  build:
    runs-on: ${{ inputs.runs-on }}
    environment: ${{ inputs.environment }}
    steps:
      - name: 'Setup: Git checkout'
        uses: actions/checkout@a12a3943b4bdde767164f792f33f40b04645d846

      - name: 'Setup: Configure AWS credentials'
        uses: aws-actions/configure-aws-credentials@05b148adc31e091bafbaf404f745055d4d3bc9d2
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id_nonprod_app_deploy }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key_nonprod_app_deploy }}
          aws-region: ${{ inputs.aws-region }}
          cluster-name: ${{ inputs.cluster-name }}

      - name: 'Get Kubeconf EKS'
        run: |
          aws eks update-kubeconfig --region ${{ inputs.aws-region }} --name ${{ inputs.cluster-name }}

      - name: 'Setup: Create yaml file'
        run: |
          cat <<EOF > secret.yaml
          apiVersion: v1
          kind: Secret
          metadata:
            name: ${{ inputs.name }}
            namespace: ${{ inputs.namespace }}
          type: Opaque
          stringData:
          EOF

      - name: 'Setup: Extract secrets and append to yaml'
        env:
          SECRETS_JSON: ${{ toJson(secrets) }}
        run: |
          keys=${{ inputs.includes }}
          for key in ${keys//,/ }
          do
              value=$(echo "$SECRETS_JSON" | jq -r ".$key")
              if [[ "$value" == "null" ]]; then
                  echo "$key not found in GitHub secrets. Abort!"
                  exit 1
              fi
              echo "Found: $key"
              echo -e "  $key: \"$value\"\n" >> secret.yaml
          done

      - name: 'Setup: Deploy secrets file'
        run: |
          kubectl apply -f secret.yaml

      # - name: Create Kubernetes Secrets
      #   env: 
      #     input_json: ${{ toJson(secrets) }}
      #     secrets_list: ${{ inputs.secrets_list }}
      #     environment: ${{ inputs.environment }}
      #     namespace: ${{ inputs.namespace }}
      #     k8secname: ${{ inputs.secrets_name }}
      #   run: |
      #     IFS=',' read -ra secrets_array <<< "$secrets_list"
      #     create=("kubectl" "create" "-n $namespace" "secret" "generic" "$k8secname")
      #     delete=("kubectl" "delete" "-n $namespace" "secret" "--ignore-not-found" "$k8secname")
      #     for secret_key in "${secrets_array[@]}"; do
      #       if [[ $input_json == *"$secret_key"* ]]; then
      #         secret_value=$(echo "$input_json" | jq -r ".$secret_key")
      #         create+=("--from-literal=""$secret_key=$secret_value")
      #       fi
      #     done
      #     echo "${create[@]}"
      #     ${delete[@]}
      #     ${create[@]}

